<?php

namespace Viweb\BlogueuseBundle\Repository;

/**
 * BlogueuseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogueuseRepository extends \Doctrine\ORM\EntityRepository
{
    
    
    
    
    
    function findBlogueuseByEcoleId($ecole_id)
    {

        $qb = $this->createQueryBuilder('b');

            // On fait une jointure avec l'entité Category avec pour alias « c »
            $qb
              ->innerJoin('b.ecole', 'e')
              ->addSelect('e')
            ;

            // Puis on filtre sur le nom des catégories à l'aide d'un IN
            $qb->where($qb->expr()->in('e.id', $ecole_id));
            // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

            // Enfin, on retourne le résultat
            return $qb
              ->getQuery()
              ->getResult()
            ;
    }
    
    
    
    function findByEcole($id, $archive = '')
    {
        $year = '2022-2023';
        if(is_array($id)) {
            if($id[0]->getId() == 22 || $id[0]->getId() == 24) {
                $year = '2023-2024';
            } elseif($id[0]->getId() == 1 || $id[0]->getId() == 28 || $id[0]->getId() == 2 || $id[0]->getId() == 3 || $id[0]->getId() == 4 || $id[0]->getId() == 12 || $id[0]->getId() == 30 || $id[0]->getId() == 33 || $id[0]->getId() == 32 || $id[0]->getId() == 31 || $id[0]->getId() == 23 || $id[0]->getId() == 29 || $id[0]->getId() == 6) {
                $year = '2024-2025';
            }
        }
        $start_date = new \DateTime();
        $start_date->setTimestamp(mktime());
        $qb = $this->createQueryBuilder('b');


        $qb
            ->where('b.ecole  = :ecole')                      
            ->andwhere("b.datePlanification <= :dateplan")
            ->setParameter('ecole', $id)
            ->setParameter('dateplan', $start_date)
            ->orderBy('b.nom', 'ASC');
        if(!empty($archive))  {
            $qb
              ->andWhere('b.annee = :annee')
              ->setParameter('annee', $year);
        }    

        return $qb
            ->getQuery()
            ->getResult();
    }

    function getBlogueuseforselect()
    {

        $qb = $this->createQueryBuilder('b');
        $result = $qb
            ->select('b.id',
                                   'b.nom',
                                   'b.prenom',
                                   'e.nom as nomecole')
            ->innerJoin('b.ecole', 'e')
            ->getQuery()
            ->getResult();
        //print_r($result);exit();
        $arr = array();
        if(sizeof($result)>0) {
            foreach($result as $res) {
               $arr[$res['nomecole']][$res['prenom'].' '.$res['nom']] =  $res['id'];
            }
        }
        return $arr;
    }

    function getBlogueuseautocomplete()
    {

        $qb = $this->createQueryBuilder('b');
        $result = $qb
            ->select('b.nom','b.prenom','b.id')
            ->groupBy('b.prenom','b.nom')
            ->getQuery()
            ->getResult();
        /*$arr = array();
        if(sizeof($result)>0) {
            foreach($result as $res) {
               $arr[] = $res['prenom'].' '.$res['nom'];
            }
        }*/
        return $result;
    }

    function getBlogueusebyname($nom)
    {
        $tnom = explode(" ",$nom);

        $qb = $this->createQueryBuilder('b');
        $result = $qb
            ->select('b')
            ->where('b.nom = :nom')
            ->setParameter('nom', $tnom[1])
            ->getQuery()
            ->getResult();
        return $result;
    }
    
    public function createAlphabeticalQueryBuilder()
    {
        

        return $this->createQueryBuilder('e')
               ->orderBy('e.nom', 'ASC')
               ->groupBy('e.prenom','e.nom');
    }
    
    

    function getBlogueusesSearch($search)
    {
        $start_date = new \DateTime();
        $start_date->setTimestamp(mktime());

        $qb = $this->createQueryBuilder('b');
        $result = $qb
            ->select('b')
            ->groupBy('b.prenom','b.nom')
            ->where("CONCAT(b.prenom, ' ', b.nom) LIKE :term")
            ->orwhere("b.prenom LIKE :term")
            ->orwhere("b.nom LIKE :term")
            ->setParameter('term', '%'.$search.'%')
            ->andwhere("b.datePlanification <= :dateplan")
            ->setParameter('dateplan', $start_date)
            ->getQuery()
            ->getResult();
        return $result;
    }

    
}
