<?php

namespace Viweb\ArticleBundle\Repository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{



    public function findAllbyEcole($ecole_id)
        {


          return $this


                ->createQueryBuilder('a')

                ->where('blogueuse.ecole = :ecole_id')
                ->setParameter('ecole_id', $ecole_id)
                ->leftJoin('a.blogueuse', 'blogueuse')
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('blogueuse.annee >= :annee')
                ->setParameter('annee', '2019-2020' )
                ->orderBy('a.datePublication', 'DESC')
                ->getQuery()
                ->getResult()
                ;
        }


    public function findAllbyEcoleDate($ecole_id, $date)
        {
          if(!empty($ecole_id) && !empty($date)) {
              $db = $this->createQueryBuilder('a')
              ->where('blogueuse.ecole = :ecole_id')
              ->setParameter('ecole_id', $ecole_id)
              ->leftJoin('a.blogueuse', 'blogueuse')
              ->andWhere('a.datePlanification >= :debannee')
              ->andWhere('a.datePlanification <= :finannee')
              ->andWhere('a.datePlanification <= :today')
              ->setParameter('today', new \DateTime('now') )
              ->setParameter('debannee', new \DateTime(($date-1).'-09-01') )
              ->setParameter('finannee', new \DateTime($date.'-08-31') )


              ->andWhere('a.journee = :journee')
              ->setParameter('journee', 0 )
              ->andWhere('a.lainee = :lainee')
              ->setParameter('lainee', 0 )
              ->andWhere('a.lblog = :lblog')
              ->setParameter('lblog', 0 )

              ->orderBy('a.datePublication', 'DESC')
            ->getQuery()
            ->getResult()
            ;
          } elseif(empty($ecole_id) && !empty($date)) {

              $db = $this->createQueryBuilder('a')
              ->leftJoin('a.blogueuse', 'blogueuse')
              ->where('a.datePlanification >= :debannee')
              ->andWhere('a.datePlanification <= :finannee')
              ->andWhere('a.datePlanification <= :today')
              ->setParameter('today', new \DateTime('now') )
              ->setParameter('debannee', new \DateTime(($date-1).'-09-01') )
              ->setParameter('finannee', new \DateTime($date.'-08-31') )

              


              ->andWhere('a.journee = :journee')
              ->setParameter('journee', 0 )
              ->andWhere('a.lainee = :lainee')
              ->setParameter('lainee', 0 )
              ->andWhere('a.lblog = :lblog')
              ->setParameter('lblog', 0 )

              
              ->orderBy('a.datePublication', 'DESC')

            ->getQuery()
            ->getResult()
            ;
          } else {
              $db = $this->createQueryBuilder('a')
              ->where('blogueuse.ecole = :ecole_id')
              ->setParameter('ecole_id', $ecole_id)
              ->leftJoin('a.blogueuse', 'blogueuse')
              ->orderBy('a.datePublication', 'DESC')
                  ->andWhere('a.datePlanification <= :today')
                  ->setParameter('today', new \DateTime('now') )

                  


                  ->andWhere('a.journee = :journee')
                  ->setParameter('journee', 0 )
                  ->andWhere('a.lainee = :lainee')
                  ->setParameter('lainee', 0 )
                  ->andWhere('a.lblog = :lblog')
                  ->setParameter('lblog', 0 )

                  
            ->getQuery()
            ->getResult()
            ;
          }
          return $db;
        }




    public function findAllbyEcoleNoDate($ecole_id)
        {


          return $this


            ->createQueryBuilder('a')

              ->where('blogueuse.ecole = :ecole_id')
              ->setParameter('ecole_id', $ecole_id)
              ->leftJoin('a.blogueuse', 'blogueuse')
              ->orderBy('a.datePublication', 'DESC')
            ->getQuery()
            ->getResult()
          ;
        }



    public function findAllbyEcoleCategorie($categorie_id, $ecole_id)
        {
          return $this
            ->createQueryBuilder('a')

              ->leftJoin('a.blogueuse', 'blogueuse')
              ->leftJoin('a.categories', 'categorie')
              ->where('categorie = :categorie_id')
              ->setParameter('categorie_id', $categorie_id)
              ->andWhere('blogueuse.ecole = :ecole_id')
              ->setParameter('ecole_id', $ecole_id)
              ->andWhere('a.datePlanification <= :today')
              ->setParameter('today', new \DateTime('now') )
              ->andWhere('blogueuse.annee >= :annee')
              ->setParameter('annee', '2018-2019' )
              ->orderBy('a.datePublication', 'DESC')

            ->getQuery()
            ->getResult()
          ;
        }


    public function findAllbyCategorie($categorie_id)
        {
          return $this
            ->createQueryBuilder('a')

              ->leftJoin('a.blogueuse', 'blogueuse')
              ->leftJoin('a.categories', 'categorie')
              ->where('categorie = :categorie_id')
              ->setParameter('categorie_id', $categorie_id)
              ->andWhere('a.datePlanification <= :today')
              ->setParameter('today', new \DateTime('now') )
              ->andWhere('blogueuse.annee >= :annee')
              ->setParameter('annee', '2018-2019' )
              ->orderBy('a.datePublication', 'DESC')

            ->getQuery()
            ->getResult()
          ;
        }


    public function findAllbyCategorieGroup($group)
        {
          return $this
            ->createQueryBuilder('a')

              ->leftJoin('a.blogueuse', 'blogueuse')
              ->leftJoin('a.categories', 'categorie')
              ->where('categorie IN (:group)')
              ->setParameter('group', $group)
              ->andWhere('a.datePlanification <= :today')
              ->setParameter('today', new \DateTime('now') )
              ->andWhere('blogueuse.annee >= :annee')
              ->setParameter('annee', '2018-2019' )
              ->orderBy('a.datePublication', 'DESC')

            ->getQuery()
            ->getResult()
          ;
        }



    public function myFindByBlogueuse($blogueuse_id)
    {


        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.blogueuse = :blogueuse_id')
                ->setParameter('blogueuse_id', $blogueuse_id)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->orderBy('a.datePublication', 'DESC');

              ;

              return $qb
                ->getQuery()
                ->getResult()
              ;
        }


      $qb = $this->createQueryBuilder('a');

      $qb
        ->where('a.id = :blogueuse_id')
        ->setParameter('id', $blogueuse_id);
      ;

      return $qb
        ->getQuery()
        ->getResult()
      ;
    }




      public function findDerniersArticles($limit=0)
        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.brouillon = :brouillon')
                ->leftJoin('a.blogueuse', 'blogueuse')
                ->setParameter('brouillon', 0)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('blogueuse.annee >= :annee')
                ->setParameter('annee', '2017-2018' )


                ->andWhere('a.journee = :journee')
                ->setParameter('journee', 0 )
                ->andWhere('a.lainee = :lainee')
                ->setParameter('lainee', 0 )
                ->andWhere('a.lblog = :lblog')
                ->setParameter('lblog', 0 )

                ->orderBy('a.datePublication', 'DESC');
              ;

              if(!empty($limit)) {
                $qb->setMaxResults($limit);
              }
              return $qb
                ->getQuery()
                ->getResult()
              ;
        }


      public function findJourneeArticles($limit=0)
        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.brouillon = :brouillon')
                ->leftJoin('a.blogueuse', 'blogueuse')
                ->setParameter('brouillon', 0)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('blogueuse.annee >= :annee')
                ->setParameter('annee', '2018-2019' )
                ->andWhere('a.journee = :journee')
                ->setParameter('journee', 1 )
                ->orderBy('a.datePublication', 'DESC');
              ;

              if(!empty($limit)) {
                $qb->setMaxResults($limit);
              }
              return $qb
                ->getQuery()
                ->getResult()
              ;
        }


      public function findLaineeArticles($limit=0)
        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.brouillon = :brouillon')
                ->leftJoin('a.blogueuse', 'blogueuse')
                ->setParameter('brouillon', 0)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('blogueuse.annee >= :annee')
                ->setParameter('annee', '2018-2019' )
                ->andWhere('a.lainee = :lainee')
                ->setParameter('lainee', 1 )
                ->orderBy('a.datePublication', 'DESC');
              ;

              if(!empty($limit)) {
                $qb->setMaxResults($limit);
              }
              return $qb
                ->getQuery()
                ->getResult()
              ;
        }


      public function findLblogArticles($limit=0)
        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.brouillon = :brouillon')
                ->leftJoin('a.blogueuse', 'blogueuse')
                ->setParameter('brouillon', 0)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('blogueuse.annee >= :annee')
                ->setParameter('annee', '2018-2019' )
                ->andWhere('a.lblog = :lblog')
                ->setParameter('lblog', 1 )
                ->orderBy('a.datePublication', 'DESC');
              ;

              if(!empty($limit)) {
                $qb->setMaxResults($limit);
              }
              return $qb
                ->getQuery()
                ->getResult()
              ;
        }




    public function myFindAll($blogueuse_id)
        {

         $qb = $this->createQueryBuilder('a');

              $qb
                ->where('a.blogueuse = :blogueuse')
                ->setParameter('blogueuse', $blogueuse_id)
              ;

              return $qb
                ->getQuery()
                ->getResult()
              ;
              }


    public function findByEcole($ecole_id)
        {

         $qb = $this->createQueryBuilder('a');

                // On fait une jointure avec l'entité Category avec pour alias « c »
                $qb
                  ->innerJoin('a.blogueuse', 'b')
                  ->addSelect('b')
                ;

                // Puis on filtre sur le nom des catégories à l'aide d'un IN
                $qb->where($qb->expr()->in('b.id', $ecole_id));
                // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

                // Enfin, on retourne le résultat
                return $qb
                  ->getQuery()
                  ->getResult()
                ;
              }





public function listArticlesArchives($limit=0) {
  $qb = $this->createQueryBuilder('a');

      $qb
        ->where('a.brouillon = :brouillon')
        ->leftJoin('a.blogueuse', 'blogueuse')
        ->setParameter('brouillon', 0)
        //->andWhere('blogueuse.annee = :annee')
        //->setParameter('annee', '2017-2018' )
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
        ->orderBy('a.datePublication', 'DESC');
      ;

      if(!empty($limit)) {
        $qb->setMaxResults($limit);
      }
      return $qb
        ->getQuery()
        ->getResult()
      ;
  }


    public function searchArticles($search,$limit=0)
        {
          $qb = $this->createQueryBuilder('a');

              $qb
                ->where("a.titre LIKE :term")
                ->orwhere("a.description LIKE :term")
                ->orwhere("a.contenu LIKE :term")
                ->setParameter('term', '%'.$search.'%')
                ->andWhere('a.brouillon = :brouillon')
                ->setParameter('brouillon', 0)
                ->andWhere('a.datePlanification <= :today')
                ->setParameter('today', new \DateTime('now') )
                ->andWhere('a.journee = :journee')
                ->setParameter('journee', 0 )
                ->andWhere('a.lainee = :lainee')
                ->setParameter('lainee', 0 )
                ->andWhere('a.lblog = :lblog')
                ->setParameter('lblog', 0 )

                ->orderBy('a.datePublication', 'DESC');
              ;

              if(!empty($limit)) {
                $qb->setMaxResults($limit);
              }
              return $qb
                ->getQuery()
                ->getResult()
              ;
        }

}
